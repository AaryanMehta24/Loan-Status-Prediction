# -*- coding: utf-8 -*-
"""Loan Status Prediction System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4ZjGY4xdq6XQ_8ZPSmk_wnKvJ6P_8hR

Importing Dependencies
"""

import pandas as pd
import numpy as np 
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import pickle
"""Data Collection and Processing"""

#loading th dataset
loan_dataset = pd.read_csv("train.csv")

type(loan_dataset)

# printing the first 5 columns of the dataset
loan_dataset.head(5)

# no. of rows and columns in the dataset
loan_dataset.shape

# statistical measures
loan_dataset.describe()

# no. of missing values in each columns
loan_dataset.isnull().sum()

loan_dataset = loan_dataset.dropna()

# no. of missing values in each columns
loan_dataset.isnull().sum()

# Label Encoding
loan_dataset.replace({"Loan_Status" : {"N":0,"Y":1}},inplace=True)

# printing the first 5 columns of the dataset
loan_dataset.head(5)

# Dependents column values
loan_dataset["Dependents"].value_counts()

# Replacing the value of 3+ to 4 in Dependents column
loan_dataset = loan_dataset.replace(to_replace = "3+", value = 4)

# Dependents column values
loan_dataset["Dependents"].value_counts()

"""Data Visualization"""

# Education and Loan Status
sns.countplot(x="Education" , hue = "Loan_Status",data= loan_dataset)

# Marital Status and Loan Status
sns.countplot(x="Married", hue="Loan_Status" , data=loan_dataset)

# Self Employed and Loan Status
sns.countplot(x="Self_Employed",hue="Loan_Status",data = loan_dataset)

# Gender and Loan Status
sns.countplot(x="Gender",hue="Loan_Status",data = loan_dataset)

# Dependents and Loan Status
sns.countplot(x="Dependents",hue="Loan_Status",data = loan_dataset)

# Credit History and Loan Status
sns.countplot(x="Credit_History",hue="Loan_Status",data=loan_dataset)

# Property Area and Loan Status
sns.countplot(x="Property_Area",hue="Loan_Status",data=loan_dataset)

# converting Categorical columns to numerical values
loan_dataset.replace({"Married" : {"No":0,"Yes":1},"Gender" : {"Female":0,"Male":1}},inplace=True)

# converting Categorical columns to numerical values
loan_dataset.replace({"Education" : {"Not Graduate": 0,"Graduate":1} , "Self_Employed" : {"No":0,"Yes":1},
                      "Property_Area" : {"Rural":0,"Semiurban":1,"Urban":2}},inplace=True)

loan_dataset.info()

loan_dataset.head()

# Serparating the data and label
X = loan_dataset.drop(columns=["Loan_ID","Loan_Status"],axis=1)
Y = loan_dataset["Loan_Status"]

print(X)

print(Y)

"""Train Test Split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)
X_train['Dependents']=X_train['Dependents'].astype(int)


"""Training the model:

Support Vector Machine Model
"""

classifier = svm.SVC(kernel ="linear")

# Training the Support Vector Machine Model
classifier.fit(X_train.values,Y_train)

"""Model Evaluation"""

# Accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

# print("Accuracy on Training Data (SVM) : ",training_data_accuracy)

# Accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
# print("Accuracy on Training Data (SVM) : ",training_data_accuracy)
# print("Accuracy on Test Data (SVM) : ",test_data_accuracy)

"""Making a Predictive System"""

input_data = (1,1,2,1,1,5417,4196.0,267.0,360.0,1.0,2)

#Changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#Reshape the array as we are predicting one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#Standarize the input data
scaler = StandardScaler()
scaler.fit(X.values)
std_data = scaler.transform(input_data_reshaped)
print(std_data)

# prediction = model.predict(std_data)
# print(prediction)

# if (prediction[0] == 0):
#   print("Loan is Not Approved")
# else:
#   print("Loan is Approved")

"""**Decision Tree**

"""

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier(criterion = 'entropy',random_state=0)

clf.fit(X_train,Y_train)

x_prediction_train_decision = clf.predict(X_train)
train_accuracy = accuracy_score(x_prediction_train_decision,Y_train)
# print("training data accuracy by decisiontree",train_accuracy)

x_prediction_test_decision = clf.predict(X_test)
test_accuracy = accuracy_score(x_prediction_test_decision,Y_test)

# print("test data accuracy by decisiontree",test_accuracy)



#Logistic Regression
logid = LogisticRegression()
logid.fit(X_train,Y_train)

x_prediction_train_logistic = logid.predict(X_train)
train_accuracy_logistic = accuracy_score(x_prediction_train_logistic,Y_train)
# print("training data accuracy by logistic regression",train_accuracy_logistic)

x_prediction_test_logistic = logid.predict(X_test)
test_accuracy_logistic = accuracy_score(x_prediction_test_logistic,Y_test)

# print("test data accuracy by logistic regression",test_accuracy_logistic)


#Random Forest
from sklearn.ensemble import RandomForestClassifier

rf_classifier = RandomForestClassifier(random_state=0)
rf_classifier.fit(X_train,Y_train)

x_prediction_train_random = rf_classifier.predict(X_train)
train_accuracy_random = accuracy_score(x_prediction_train_random,Y_train)
# print("training data accuracy by random forest",train_accuracy_random)

x_prediction_test_random = rf_classifier.predict(X_test)
test_accuracy_random = accuracy_score(x_prediction_test_random,Y_test)

# print("test data accuracy by random forest",test_accuracy_random)









#Accuracy
print("Accuracy on Training Data (SVM) : ",training_data_accuracy)
print("Accuracy on Test Data (SVM) : ",test_data_accuracy)
print("Training data accuracy by decisiontree",train_accuracy)
print("Test data accuracy by decisiontree",test_accuracy)
print("Training data accuracy by random forest",train_accuracy_random)
print("Test data accuracy by random forest",test_accuracy_random)
print("training data accuracy by logistic regression",train_accuracy_logistic)
print("test data accuracy by logistic regression",test_accuracy_logistic)


pickle.dump(logid,open('model.pkl','wb'))

#loading the model 
model = pickle.load(open('model.pkl','rb'))
